% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/5-scorers.R
\name{computeScores}
\alias{computeScores}
\title{Compute Scores}
\usage{
computeScores(
  x,
  i = NULL,
  na.rm = TRUE,
  scorers = NULL,
  scores = NULL,
  args = NULL,
  sample.id = TRUE,
  cores = 1L,
  logger = NULL
)
}
\arguments{
\item{x}{features-by-samples matrix}

\item{i}{(optional) numerical vector giving the rows
in \code{x} or character vector matching the row
names in \code{x}
If \code{missing} or \code{i = NULL}, all the rows
in \code{x} are considered for the computation of
the scores}

\item{na.rm}{logical, whether to remove \code{NA}
values before computation}

\item{scorers}{named list of scoring functions.
If provided, \code{scores} is not considered.
Each function must accept some specific arguments,
i.e. \code{x}, \code{i}, \code{na.rm}, \code{...}
and is expected to compute a score for each column
in \code{x}}

\item{scores}{character vector, indicating the
summary score(s) to compute}

\item{args}{named list, where the names must match the
\code{scores} or the names of \code{scorers}.
Each element in the list is another list
containing the arguments to pass to the function used
for computing the named score. For example,
\code{args = list(trimmedMean = list(trim = 0.4))}
indicates to use \code{trim = 0.4} when computing the
trimmed mean scores}

\item{sample.id}{logical, whether to report the
sample ID as a column in the output data frame}

\item{cores}{number of cores to use for parallel execution.}

\item{logger}{a \code{\link{Logger}}}
}
\value{
A numerical vector containing the computed
score for each sample.
}
\description{
This function computes summary
score(s) of the signature \code{i} in input
considering each column vector in the input matrix
\code{x}.
}
\examples{
\dontrun{
#set seed for reproducibility
set.seed(seed = 5381L)

#Define row/col size
nr = 20
nc = 10

#Create input matrix
x = matrix(
 data = stats::runif(n = nr*nc, min = 0, max = 1000),
 nrow = nr,
 ncol = nc,
 dimnames = list(
   paste0("g",seq(nr)),
   paste0("S",seq(nc))
 )
)

#Compute all scores
computeScores(
 x = x,
 i = rownames(x)[1:10]
)

#Compute all scores using 'scorers' argument
computeScores(
 x = x,
 i = rownames(x)[1:10],
 scorers = list(
    'score1' = getScorer('sum'),
    'score2' = getScorer('mean')
 )
)

#Pass different parameters to the same scorer
computeScores(
 x = x,
 i = rownames(x)[1:10],
 scorers = list(
  'score1' = getScorer('trimmedMean'),
  'score2' = getScorer('trimmedMean')
 ),
 args = list(
  'score1' = list(trim = 0),
  'score2' = list(trim = 0.3)
 )
)

#Transform data and compute the scores
computeScores(
 x = x,
 i = rownames(x)[1:10],
 scorers = list(
  'score1' = getScorer('weightedSum'),
  'score2' = getScorer('mean')
 ),
 args = list(
  'score1' = list(transform = 'quantile'),
  'score2' = list(
     transform = 'stepFunction',
     method = 'median',
     by = 'rows'
   )
 )
)
}
}
\author{
Alessandro Barberis
}
\keyword{internal}
